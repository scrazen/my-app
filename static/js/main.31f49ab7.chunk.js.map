{"version":3,"sources":["index.js"],"names":["CircularProgressBar","props","state","percentage","color","Math","random","toString","substr","start","floor","background","direction","increasePercentage","bind","setInterval","this","setState","sqSize","radius","strokeWidth","viewBox","dashArray","PI","dashOffset","style","position","left","top","width","height","stroke","className","cx","cy","r","transform","strokeDasharray","strokeDashoffset","React","Component","defaultProps","Rainbow","elements","i","push","calculateWinner","squares","lines","length","a","b","c","Square","onClick","value","ReactDOM","render","document","getElementById","Board","renderSquare"],"mappings":"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","file":"static/js/main.31f49ab7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nclass CircularProgressBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      percentage: this.props.percentage,\r\n      color:\r\n        \"#\" + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\r\n      start: Math.floor(Math.random() * (360 - 1 + 1)) + 1,\r\n      background: \"#000000\",\r\n      direction: [-1,1][Math.random()*2|0]  \r\n    };\r\n\r\n    this.increasePercentage = this.increasePercentage.bind(this);\r\n    setInterval(this.increasePercentage, 20);\r\n  }\r\n  increasePercentage() {\r\n    if (this.state.percentage <= 100) {\r\n      this.setState({\r\n        percentage:\r\n          this.state.percentage + (Math.floor(Math.random() * (3 - 1 + 1)) + 1)\r\n      });\r\n    } else {\r\n      this.setState({\r\n        percentage: 0,\r\n        color:\r\n          \"#\" +\r\n          (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\r\n        background: this.state.color,\r\n        start: Math.floor(Math.random() * (360 - 1 + 1)) + 1,\r\n        direction: [-1,1][Math.random()*2|0]  \r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Size of the enclosing square\r\n    const sqSize = this.props.sqSize;\r\n    // SVG centers the stroke width on the radius, subtract out so circle fits in square\r\n    const radius = (this.props.sqSize - this.props.strokeWidth) / 2;\r\n    // Enclose cicle in a circumscribing square\r\n    const viewBox = `0 0 ${sqSize} ${sqSize}`;\r\n    // Arc length at 100% coverage is the circle circumference\r\n    const dashArray = radius * Math.PI * 2;\r\n    // Scale 100% coverage overlay with the actual percent\r\n    const dashOffset = dashArray - (dashArray * this.state.percentage * this.state.direction) / 100;\r\n\r\n    return (\r\n      <svg\r\n        style={{\r\n          position: \"absolute\",\r\n          left: (200 - sqSize) / 2 + 10 + \"px\",\r\n          top: (200 - sqSize) / 2 + 10 + \"px\"\r\n        }}\r\n        width={this.props.sqSize}\r\n        height={this.props.sqSize}\r\n        viewBox={viewBox}\r\n      >\r\n        <circle\r\n          style={{\r\n            stroke: this.state.background\r\n          }}\r\n          className=\"circle-background\"\r\n          cx={this.props.sqSize / 2}\r\n          cy={this.props.sqSize / 2}\r\n          r={radius}\r\n          strokeWidth={`${this.props.strokeWidth}px`}\r\n        />\r\n        <circle\r\n          className=\"circle-progress\"\r\n          cx={this.props.sqSize / 2}\r\n          cy={this.props.sqSize / 2}\r\n          r={radius}\r\n          strokeWidth={`${this.props.strokeWidth}px`}\r\n          // Start progress marker at 12 O'Clock\r\n          transform={`rotate(${this.state.start} ${this.props.sqSize / 2} ${this\r\n            .props.sqSize / 2})`}\r\n          style={{\r\n            strokeDasharray: dashArray,\r\n            strokeDashoffset: dashOffset,\r\n            stroke: this.state.color\r\n          }}\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nCircularProgressBar.defaultProps = {\r\n  sqSize: 200,\r\n  percentage: 25,\r\n  strokeWidth: 10\r\n};\r\nconst circles = {\r\n  position: \"fixed\",\r\n  left: \"199\"\r\n};\r\nclass Rainbow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      percentage: 0\r\n    };\r\n\r\n    //setInterval(this.increasePercentage, 20);\r\n  }\r\n\r\n  increasePercentage() {\r\n    if (this.state.percentage <= 100) {\r\n      this.setState({\r\n        percentage: this.state.percentage + Math.floor(Math.random() * (3 - 1 + 1)) + 1\r\n      });\r\n    } else {\r\n      this.setState({\r\n        percentage: 0,\r\n        color:\r\n          \"#\" +\r\n          (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\r\n        background: this.state.color,\r\n        start: Math.floor(Math.random() * (360 - 1 + 1)) + 1\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    var elements = [];\r\n    for (var i = 20; i <= 200; i = i + 20) {\r\n      elements.push(\r\n        <CircularProgressBar\r\n          strokeWidth=\"11\"\r\n          sqSize={i.toString()}\r\n          percentage={this.state.percentage}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {elements}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Rainbow />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}